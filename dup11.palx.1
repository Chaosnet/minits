
.lif  z %defin
	.title	DUP11 support
	.sbttl	DUP11 support: Definitions, Macros and Code

.iif  z %defin, .nlist		;don't list definitions and macros if not
				;defining them

.if  nz %defin			;only define symbols when we are supposed to

defnet dup			;declare running with dup-11 hardware

.pkhrd <	;;; for packet transmit and receive
	..word $dutst,0		;start of transmit packet
	  ..word $dulen,1	;packet data length (doesn't count type or crc)
	..word $durst,0		;start of receive packet
	  ..word $dupty,1	;protocol type (same as ethernet)
  >

.if p1
	.sbttl	-- Definitions 

du.rcs==0		;[R/W] Receiver control and status
 %durdn==bit.07			;receive done
 %durie==bit.06			;receive interrupt enable
 %dudie==bit.05			;dataset intertupt enable
 %duren==bit.04			;receiver enable
 %durts==bit.02			;request to send
 %dudtr==bit.01			;data terminal ready
du.rbf==2		;[R  ] Receiver data buffer
 %durde==bit.15			;receive data error
 %duovr==bit.14			;overrun (lost packet)
 %ducrc==bit.12			;crc parity error
 %durab==bit.10			;receive abort
 %durem==bit.09			;receive end of message
 %dursm==bit.08			;receive start of message
du.pcs==2		;[  W] Parameter control and status
du.tcs==4		;[R/W] Transmit control and status
 %dutdl==bit.15			;transmit data late (count as abort)
 %durst==bit.08			;device reset
 %dutdn==bit.07			;transmit done
 %dutie==bit.06			;transmit done interrupt enable
 %dusnd==bit.04			;send
du.tbf==6		;[R/W] Transmit data buffer
 %dutab==bit.10			;receive abort
 %dutem==bit.09			;receive end of message
 %dutsm==bit.08			;receive start of message

.endc p1

	.sbttl	-- Macros

ndup11==0

.macro dup11 vec,csr,chaddr
.iif z ndup11, dupnet==nnet
  .if p2
    %%==.
	.=du$vec+<2*ndup11>
	  .word vec
	.=du$csr+<2*ndup11>
	  .word csr
		.if nz ncpchs
	.=du$chs+<2*ndup11>
	  .word chaddr
		.endc
      .=%%
   .endc
ndup11==ndup11+1
nnet==nnet+1
.endm

.endc %defin

.iif  z %defin, .list		;start listing again

.iif nz %defin, .nlist		;don't list code if only doing definitions

.if   z %defin			;only do code if not defining symbols

	.sbttl	-- Code

  ;;
;;;;;;	Tables
  ;;

du$vec:	.blkw ndup11
du$csr:	.blkw ndup11
		.if nz ncpchs
du$chs:	.blkw ndup11
		.endc

  ;;
;;;;;;	A DUP11 hardware object
  ;;

  dsect <
		.blkb l$nt	;a network object with...
$durcs==$ntcsr			;DUP receiver control and status pointer
$dutcs::	.blkw 1		;DUP transmit control and status pointer

$durpb::	.blkw 1		;the large packet buffer (about 3 fullsized packets)
$durfp::	.blkw 1		;free packet buffers
$durcp::	.blkw 1		;current packet buffer in use
$durup::	.blkw 1		;used packet buffers (to be processed)
$durue::	.blkw 1		;end pointer to used packet buffers
$durpc::	.blkw 1		;number of packet buffers on the used list -1.
				;Also serves as a lock.

$durjsr::	jsr r5,@#durint	;interrupt vector points here and assumes
				;the order of the following words
$durbf::	.blkw 1		;DUP receiver buffer pointer
$durcon::	.blkw 1		;receiver continuation
$durbp::	.blkw 1		;byte pointer while reading
$durbc::	.blkw 1		;byte count while reading
$dur..::			;end of receive block

$duttl::	.blkw 1		;transmit length (in bytes) of all packets
$dutsi::	.blkw 1		;send inhibit
$dutpk::	.blkw 1		;current xmit packet
$dutjsr::	jsr r5,@(pc)+	;interrupt vecotr points here and assumes
				;the order of the following words
$dutcon::	.blkw 1		;xmit continuation (part of the jsr sequence)
$dutbp::	.blkw 1		;byte pointer while transmitting
$dutbf::	.blkw 1		;DUP transmit buffer pointer
$dutbc::	.blkw 1		;byte count while transmitting
$dut..::			;end of transmit block

  >,l$dup11

durjsr:	jsr r5,@#durint		;jsr templates
dutjsr:	jsr r5,@(pc)+

;;; receive side.  The inner loop, from begining to end, is the following set
;;; of instructions:
;;; 				;11/23 timings, MSV11-D memory
;;; 	jsr r5,@#durint		;4.69		    = 4.69
;;; 	push @(r5)+		;1.72 + 2.25 + 1.84 = 5.81
;;; 	bpl ...			;1.72		    = 1.72
;;; 	jcall @(r5)+		;2.85		    = 2.85
;;; 	bit #%durem,(sp)	;1.72 + 1.12 + 1.42 = 4.26
;;; 	beq ...			;1.72		    = 1.72
;;; 	popb @(r5)		;1.72 + 1.12 + 4.09 = 6.93
;;; 	inc  (r5)+		;1.72 + 3.49	    = 5.21
;;; 	dec (r5)+		;1.72 + 3.49	    = 5.21
;;; 	ble ...			;1.72		    = 1.72
;;; 	pop r5			;1.72 + 1.12 + 0.00 = 2.84
;;; 	rti			;5.17		    = 5.17
;;; 				;		      ----
;;; 				;		     48.13

du.gen==100			;gensym counter

.macro durwat noadj
  .irp lbl,\du.gen
	mov #du.'lbl,$durcon(r5)
	durxit
du.'lbl==.
  .endm
.iif b noadj, duradj
du.gen==du.gen+1
.endm

.macro duradj
	sub #$durcon+2,r5
.endm
.macro durxit
	pop r5
	rti
.endm


;;; note: fields are zerod when network objects are made
durini:	mov r5,$durue(r5)
	add #$durup,$durue(r5)
	mov #-1,$durpc(r5)	;preset packet count/lock
	push #3
	loop <
	  push #<pksiz$-$dupty>+4
	  call fsmall
	  if eq,<bpt>
	  mov $durfp(r5),@(sp)
	  pop $durfp(r5)
	  dec (sp)
	  rptl gt
	  >
	pop *
	return

durint:				;this does not check for receiver done bit!
	push @(r5)+		;get the data word
	bmi durerr		;some error bit is on
	jcall @(r5)+		;continue at the continuation

durerr:	sub #$durcon,r5
	loop <
	  bit #%duovr,(sp)
	  if ne,<
	    netmet lo
	    exitl>
	  bit #%ducrc,(sp)
	  if ne,<
	    netmet cr
	    exitl>
	  bit #%durab,(sp)
	  if ne,<
	    netmet c2
	    exitl>
	  netmet ot
	  >
	pop *			;flush the offending data word

durnew:	push $durcp(r5)		;get current packet
	if eq,<pop *>		;none, oh well
	else <
	  mov $durfp(r5),@(sp)	;link current freelist into it
	  pop $durfp(r5)	;and make it the front of the free list
	  >
	durwat noadj
	loop <			;wait for start of message
durbeg==.			;this is the initial starting point
	  bit #%dursm,(sp)
	  exitl ne
	  pop *
	  durxit
	  >
	duradj
	popb $durbc+0(r5)	;save low part
	durwat
	bit #%durem,(sp)	;premature end?
	if ne,<	netmet ot
		br durnew >
	popb $durbc+1(r5)	;and high part
	add #<$pktdt-$durst>,$durbc(r5)	;include other fields as well
	push r1
	mov $durfp(r5),r1	;get a free packet buffer
	if eq,<			;so much for that idea
	  pop r1
	  netmet lo
	  br durnew
	  >
	mov (r1),$durfp(r5)	;unlink it
	mov r1,$durcp(r5)	;make it the current packet buffer
	clr (r1)+		;clear the link to next
	mov $durbc(r5),(r1)
	cmp (r1)+,#<pksiz$-$durst>	;make sure byte count will fit
	if hi,<
	  pop r1
100$:	  netmet bl
	  br durnew
	  >
	mov r1,$durbp(r5)	;save as byte pointer
	pop r1
	loop <
	  durwat noadj
	  bit #%durem,(sp)	;end of message?
	  if ne,<
	    duradj
	    pop *
	    br 100$
	    >
	  popb @(r5)
	  inc  (r5)+
	  dec (r5)+
	  exitl le		;get out when packet finished
	  durxit		;exit (continuation already the right thing
				;for next time)
	  >
	sub #$dur..,r5
	durwat			;wait for first CRC byte
	bit #%durem,(sp)+
	bne 100$
	durwat
	bit #%durem,(sp)+
	bne 100$		;still not yet
	durwat
	bit #%durem,(sp)+
	beq 100$		;should have been now
	mov #durbeg,$durcon(r5)	;preset the continutation
	push r1
	mov $durcp(r5),r1	;get the current packet
	clr $durcp(r5)		;and don't let anybody else see it
	mov r1,@$durue(r5)	;set it through the end pointer
	mov r1,$durue(r5)	;and setup new end pointer
	inc $durpc(r5)		;up the packet counter
	if eq,<			;my turn to service it
	  mtps 6(sp)		;reset hardware priority (under r1, r5
				;and rti address) 
	  .intstk <		;while in fairy land
	    call durprs		;go process the packet(s)
	    >
	  >
	pop r1
	durxit			;continuation already setup


;;; We are now in fairy land.  We are on the interrupt stack with r1 and r5
;;; available (push anything else we may need).  Interrupts can still happen
;;; and are actually expected, especially from this or other DUP-11s.  There
;;; is a linked list of packetd starting at $durup(r5) that need to be
;;; processed.

durprs:	push r2,r3
	loop <
	  mov $durup(r5),r2	;get a packet buffer
	  if eq,<bpt>		;should never happen.  If it does, the
				;counter is out of sync.
	  push r2		;remember it for later
	  lock 7		;while we unlink it
	    mov (r2)+,$durup(r5)	;do the unlink
	    if eq,<
	      mov r5,$durue(r5)
	      add #$durup,$durue(r5)
	      >
	  unlock
	  mov (r2)+,r1		;get the byte count (includes type)
	  mov r1,r3		;save it for the copy as well
	  add #$durst,r1	;offset by data part of packet
	  loop <		;exit whenever finished with current buffer
	    cmp r1,#pksiz.	;check against minimum size
	    if lt,< netmet bl
		    exitl >
	    call pktall		;get a packet
	    if eq,< netmet lo
		    exitl >
	    push r1		;save pointer
	    add #$dupty,r1	;go up to the start of dup data (includes type)
	    inc r3		;round up byte count for word count
	    asr r3		;now word count
	    loop <
	      mov (r2)+,(r1)+	;copy the packet
	      sorl r3		;until finished
	      >
	    pop r1
	    bis #%pkt08,$pktfl(r1)	;declare the packet safe for 08 bit
	    mov $dupty(r1),r2
	    call ethrcv
	    >
	  pop r2		;get the packet buffer back
	  lock 7		;while we splice it onto the free list
	    mov $durfp(r5),(r2)	;link free list into it
	    mov r2,$durfp(r5)	;and make it the freelist
	    dec $durpc(r5)
	    if lt,< pop *	;valid priorty set by the RTI after we return
		    exitl >
	  unlock
	  rptl			;go do the next packet buffer
	  >
	pop r3,r2
	return


;;; transmit side.  The inner loop, from begining to end, is the following set
;;; of instructions:
;;; 				;11/23 timings, MSV11-D memory
;;; 	jsr r5,@(pc)+		;4.69		    = 4.69
;;; 	pushb @0(r5)		;1.72 + x.xx + 1.84 = 7.27 (11/34: 1.96 + 4.18 + 1.13)
;;; 	inc (r5)+		;1.72 + 3.49	    = 5.21
;;; 	clrb 1(sp)		;x.xx + x.xx        = 5.31 (11/34: 1.96 + 3.35)
;;; 	pop @(r5)+		;1.72 + 1.12 + x.xx = 5.71 (11/34: 1.96 + 1.46 + 2.29)
;;; 	dec (r5)+		;1.72 + 3.49	    = 5.12
;;; 	ble ...			;1.72		    = 1.72
;;; 	pop r5			;1.72 + 1.12 + 0.00 = 2.84
;;; 	rti			;5.17		    = 5.17
;;; 				;		     -----
;;; 				;		     43.04 + about 3 more to enter this

.macro dutwat noadj
  .irp lbl,\du.gen
	mov #du.'lbl,$dutcon(r5)
	dutxit
du.'lbl==.
  .endm
.iif b noadj, dutadj
du.gen==du.gen+1
.endm

.macro dutadj
	sub #$dutcon+2,r5
.endm
.macro dutxit
	pop r5
	rti
.endm

dutnew:	dutwat noadj
dutbeg==.			;this is the initial starting point
	dutadj
	push r1
	tst $dutsi(r5)		;send inhibited?
	bne 10$			;inhibited, turn off interrupts
	call ntremq
	if eq,<	
10$:		bic #%dutie+%dusnd,@$dutcs(r5)
		pop r1
		br dutnew>
	sub $pktxs(r1),$duttl(r5)	;discount the length
	mov r1,$dutpk(r5)
	mov $pktxs(r1),$dutbc(r5)	;remember byte count
	add #$dutst,r1		;go to the beginning of the xmit packet
	mov r1,$dutbp(r5)	;and save as byte pointer
	pop r1
	mov #%dutsm,@$dutbf(r5)	;set start of message
	dutwat noadj		;and wait for a flag to be sent
	loop <
	  pushb @(r5)		;get the next character
	  inc (r5)+		;up the pointer
	  clrb 1(sp)		;make sure there are only 8 valid bits
	  pop @(r5)+		;write it into the transmit buffer
	  dec (r5)+		;down the count
	  exitl le
	  dutxit
	  >
	sub #$dut..,r5		;get to base of object
	dutwat
	mov #%dutem,@$dutbf(r5)	;signal end of message
	dutwat
	mov #%dutem,@$dutbf(r5)	;and again for the CRC
	push r1
	mov $dutpk(r5),r1
	clr $dutpk(r5)
	call pktngv		;free packet unless on a user list
	netmet ou		;count packet as out
	pop r1
	br dutnew		;go look for new packet

dupini:	clr r0
	loop <
	  call dupin1
	  add #2,r0
	  cmp r0,#ndup11*2
	  rptl lo
	  >
	return

dupin1:	mov du$csr(r0),r4
	call nxmcat
	  dupnxm
	mov #%durst,du.tcs(r4)
	clr du.pcs(r4)
	call nxmclr

	mov #l$dup11,r5
	call ntmake
	if eq,<bpt>
	mov r5,netobj+<2*dupnet>(r0)

	mov du$vec(r0),r2

	mov r4,$durcs(r5)	;receive control and status
	mov r4,$durbf(r5)	;receive ...
	add #du.rbf,$durbf(r5)	;... buffer
	mov durjsr+0,$durjsr+0(r5)	;setup jsr
	mov durjsr+2,$durjsr+2(r5)	;where to jsr to
	mov r5,(r2)		;setup receive ...
	add #$durjsr,(r2)+	;... interrupt vector
	mov #pr5,(r2)+		;at priority 5
	mov #durbeg,$durcon(r5)	;preset the continuation

	call durini		;setup free buffers and lock
	
	mov r4,$dutcs(r5)	;transmit control ...
	add #du.tcs,$dutcs(r5)	;... and status
	mov r4,$dutbf(r5)	;transmit ...
	add #du.tbf,$dutbf(r5)	;... buffer
	mov dutjsr+0,$dutjsr+0(r5)	;setup jsr @(pc)+
	mov r5,(r2)		;setup xmit ...
	add #$dutjsr,(r2)+	;... interrupt vector
	mov #pr5,(r2)+		;at priority 5
	mov #dutbeg,$dutcon(r5)	;preset the continuation
	
	mov #dupfls,$ntfls(r5)	;non-standard flush routine

		.if nz ncpchs
	mov #duchgv,nt$chs(r5)
	mov du$chs(r0),nt.chs(r5)
	mov #22.,$ctrcv(r5)	;9600 baud is expensive
		.endc

	mov #%durie+%duren+%durts+%dudtr,du.rcs(r4)
	clr du.tcs(r4)
	clr du.tbf(r4)

	mov r0,r4
	add #dupnet*2,r4
	jcall ntmak1

dupnxm:	clr netobj+<2*dupnet>(r0)
	return

dupfls:				;flush routine for a DUP11
	loop <
	  call ntremq
	  exitl eq
	  sub $pktxs(r1),$duttl(r5)	;discount the length
	  call pktngv
	  rptl
	  >
	return


.if nz ncpchs

;;; call @nt$chs(r5)[r5:=object, r1:=packet r2:=hardware_destination]

du$mqb:	.word 5000.		;max queued bytes

du$mps:	.word 200.		;mid packet size
du$lpl:	.word 3			;large packet limit
du$spl:	.word 8			;small packet limit

duchgv:	call cpks08		;make it safe for 08 bit hardware
	mov #%etchs,$dupty(r1)

	mov $pktxs(r1),$dulen(r1)
	add #$pktdt-$dutst,$pktxs(r1)

	push r0,r3
	mov du$spl,r3		;assume small packet limit
	cmp $pktxs(r1),du$mps	;compare with mid packet size
	if gt,<mov du$lpl,r3>	;wrong, was large

	inc $dutsi(r5)		;push a send inhibit level while filter
	mov r5,r2
	add #$ntxqu,r2
	loop <
	  mov (r2),r0
	  exitl eq
	  loop <		;exit mechanism
	    cmp $dupty(r1),$dupty(r0)
	    exitl ne
	    cmp $cpksi(r1),$cpksi(r0)
	    exitl ne
	    cmp $cpkdi(r1),$cpkdi(r0)
	    exitl ne
	    cmp $cpksa(r1),$cpksa(r0)
	    exitl ne
	    cmp $cpkda(r1),$cpkda(r0)
	    exitl ne
	    dec r3		;same connection, count down
	    ble 50$		;too many for this connection, throw packet
				;away
	    cmp $cpk(r1),$cpk(r0)	;op and mbz
	    exitl ne
	    cmp $cpknb(r1),$cpknb(r0)
	    exitl ne
	    cmp $cpkpn(r1),$cpkpn(r0)
	    exitl ne
	    cmp $dutsi(r5),#1
	    if eq,<		;only allowed to splice if first grabber
	      lock 6		;no more subtle bugs
	        mov $pktxl(r0),$pktxl(r1)	;link old list through new packet
		if eq,<		;this was the last on the list
		  mov r1,$ntxqe(r5)	;update last to point at new packet
		  add #$pktxl,$ntxqe(r5)	;...locative to xmit link
		  >
	        mov r1,(r2)	;splice new packet in list
		unlock		;finished frobbing pointers
	      mov r0,r1	;get old packet so it can be freed
	      >
50$:	    call pktngv		;give it up
	    clr r1		;no packet to insert anymore	
	    br 100$
	    >
	  mov r0,r2
	  add #$pktxl,r2	;create new locative
	  rptl
	  >
100$:	dec $dutsi(r5)		;pop a send inhibit level
	pop r3,r0

	tst r1
	if ne,<
	  cmp $duttl(r5),du$mqb	;max queued bytes
	  if hi,<call pktngv>	;too much on list already
	  else <
	    add $pktxs(r1),$duttl(r5)
	    call ntputq
	    >
	  >
	lock 6
	tst $dutpk(r5)
	if eq,<	bis #%dutie+%dusnd,@$dutcs(r5)
		bis #%dutsm,@$dutbf(r5)>
	unlock
	return

.endc

.endc %defin

.iif nz %defin, .list		;start listing as usual


;; local modes:
;; mode:midas
;; auto fill mode:
;; fill column:75
;; comment column:32
;; end:
   